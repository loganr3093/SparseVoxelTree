#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/string_cast.hpp>

#include "shader.h"
#include "compute_shader.h"
#include "camera.h"
#include "texture.h"
#include "vox_parser.h"
#include "sparse_voxel_tree.h"
#include "voxel_tree_memory_allocator.h"

#include <iostream>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);
void renderQuad();

// settings
constexpr int SCR_WIDTH = 960;
constexpr int SCR_HEIGHT = 540;

// texture size
const unsigned int TEXTURE_WIDTH = 960, TEXTURE_HEIGHT = 540;

const int WORKGROUP_SIZE_X = 16;
const int WORKGROUP_SIZE_Y = 16;

const int DISPATCH_X = (TEXTURE_WIDTH + WORKGROUP_SIZE_X - 1) / WORKGROUP_SIZE_X;
const int DISPATCH_Y = (TEXTURE_HEIGHT + WORKGROUP_SIZE_Y - 1) / WORKGROUP_SIZE_Y;

// camera
Camera camera(glm::vec3(0.0f, 0.0f, -5.0f), SCR_WIDTH, SCR_HEIGHT);
float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// glfw window creation
	// --------------------
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "RayTracerGL", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSwapInterval(0);

	// glad: load all OpenGL function pointers
	// ---------------------------------------
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// build and compile shaders
	// -------------------------
	Shader screenQuad("resources/shaders/default_vert.glsl", "resources/shaders/default_frag.glsl");
	ComputeShader computeShader("resources/shaders/default_compute.glsl");

	screenQuad.use();
	screenQuad.setInt("tex", 0);

	// Create texture for opengl operation
	// -----------------------------------
	Texture texture;
	texture.bind();
	texture.setParameters();
	texture.initializeStorage(GL_RGBA32F, TEXTURE_WIDTH, TEXTURE_HEIGHT, GL_RGBA, GL_FLOAT);
	texture.bindAsImage(0, 0, GL_FALSE, GL_READ_WRITE, GL_RGBA32F);

	// Vox stuff
	// Load a voxel model
    VoxelMap deer_voxel_map = VoxLoader::load("resources/models/deer.vox");
    VoxelMap horse_voxel_map = VoxLoader::load("resources/models/horse.vox");

    // Create a SparseVoxelTree from the voxel map
    SparseVoxelTree deer_tree(deer_voxel_map);
    SparseVoxelTree horse_tree(horse_voxel_map);

	std::vector<SparseVoxelTree> trees = { deer_tree };

	VoxelTreeMemoryAllocator allocator;
	allocator.Allocate(trees);

	// render loop
	// -----------
	int width, height;
	while (!glfwWindowShouldClose(window))
	{
		// Set frame time
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// Get input
		processInput(window);

		computeShader.use();
		glfwGetFramebufferSize(window, &width, &height);
        glm::vec2 screenSize = glm::vec2(width, height);
        computeShader.setVec2("ScreenSize", screenSize);

		float deg2rad = 3.1415926535897931 / 180.0;
		float planeHeight = camera.NearClipPlane * tan(camera.Fov * 0.5f * deg2rad) * 2;
        float planeWidth = planeHeight * camera.Aspect;

        computeShader.setVec3("ViewParams", glm::vec3(planeWidth, planeHeight, camera.NearClipPlane));
        computeShader.setMat4("CamWorldMatrix", camera.GetCameraToWorldMatrix());

		texture.bindAsImage(0, 0, GL_FALSE, GL_READ_WRITE, GL_RGBA32F);

		glDispatchCompute(DISPATCH_X, DISPATCH_Y, 1);

		// make sure writing to image has finished before read
		glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);

		// render image to quad
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		screenQuad.use();

		glActiveTexture(GL_TEXTURE0);
		texture.bind();

		renderQuad();

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	allocator.FreeGPUResources();
	glfwTerminate();

	return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
        camera.ProcessKeyboard(FORWARD, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
        camera.ProcessKeyboard(BACKWARD, deltaTime);

    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
        camera.ProcessKeyboard(LEFT, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
        camera.ProcessKeyboard(RIGHT, deltaTime);

    if (glfwGetKey(window, GLFW_KEY_SPACE) == GLFW_PRESS)
        camera.ProcessKeyboard(UP, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
        camera.ProcessKeyboard(DOWN, deltaTime);

    if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
        camera.ProcessMouseMovement(0.0f, -1.0f, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
        camera.ProcessMouseMovement(0.0f, 1.0f, deltaTime);

    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
        camera.ProcessMouseMovement(1.0f, 0.0f, deltaTime);
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        camera.ProcessMouseMovement(-1.0f, 0.0f, deltaTime);
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    camera.ScreenWidth = width;
    camera.ScreenHeight = height;
    camera.Aspect = width/height;
    glViewport(0, 0, width, height);
}

// renderQuad() renders a 1x1 XY quad in NDC
// -----------------------------------------
unsigned int quadVAO = 0;
unsigned int quadVBO;
void renderQuad()
{
	if (quadVAO == 0)
	{
		float quadVertices[] =
        {
			// positions  	// texture Coords
			-1.0f,  1.0f, 	0.0f, 0.0f, 1.0f,
			-1.0f, -1.0f, 	0.0f, 0.0f, 0.0f,
			 1.0f,  1.0f, 	0.0f, 1.0f, 1.0f,
			 1.0f, -1.0f, 	0.0f, 1.0f, 0.0f,
		};

		// setup plane VAO
		glGenVertexArrays(1, &quadVAO);
		glGenBuffers(1, &quadVBO);
		glBindVertexArray(quadVAO);
		glBindBuffer(GL_ARRAY_BUFFER, quadVBO);
		glBufferData(GL_ARRAY_BUFFER, sizeof(quadVertices), &quadVertices, GL_STATIC_DRAW);
		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	}

	glBindVertexArray(quadVAO);
	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
	glBindVertexArray(0);
}






/// OLD COMPUTE
#version 430 core
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout (location = 0) uniform vec2 ScreenSize;
layout (location = 1) uniform vec3 ViewParams;
layout (location = 2) uniform mat4 CamWorldMatrix;

// Node structure
struct Node {
    uint PackedData[4];
};

// Tree structure
layout(std430, binding = 0) buffer NodePoolBuffer {
    Node nodePool[];
};

layout(std430, binding = 1) buffer LeafDataBuffer {
    uint8_t leafData[];
};

// Helper functions
bool IsLeaf(Node node) {
    return (node.PackedData[0] & 1u) != 0u;
}

uint GetChildPtr(Node node) {
    return node.PackedData[0] >> 1;
}

uint64_t GetChildMask(Node node) {
    return uint64_t(node.PackedData[1]) | (uint64_t(node.PackedData[2]) << 32);
}

int GetNodeCellIndex(vec3 pos, int scaleExp) {
    ivec3 cellPos = ivec3(floor(pos)) >> scaleExp & 3;
    return cellPos.x + cellPos.z * 4 + cellPos.y * 16;
}

vec3 FloorScale(vec3 pos, int scaleExp) {
    uint mask = ~0u << scaleExp;
    return vec3(
        uintBitsToFloat(floatBitsToUint(pos.x) & mask),
        uintBitsToFloat(floatBitsToUint(pos.y) & mask),
        uintBitsToFloat(floatBitsToUint(pos.z) & mask)
    );
}

// Ray traversal
bool RayCast(vec3 origin, vec3 dir, out vec3 hitPos) {
    vec3 invDir = 1.0 / dir;
    vec3 pos = origin;
    int scaleExp = 21; // Start at the root level

    for (int i = 0; i < 256; i++) {
        Node node = nodePool[0]; // Start at the root node
        int childIdx = GetNodeCellIndex(pos, scaleExp);

        // Descend the tree
        while (!IsLeaf(node) && ((GetChildMask(node) >> childIdx) & 1u) != 0u) {
            uint childSlot = bitCount(GetChildMask(node) & ((1ull << childIdx) - 1));
            node = nodePool[GetChildPtr(node) + childSlot];
            scaleExp -= 2;
            childIdx = GetNodeCellIndex(pos, scaleExp);
        }

        // Check if we hit a leaf
        if (IsLeaf(node) && ((GetChildMask(node) >> childIdx) & 1u) != 0u) {
            hitPos = pos;
            return true;
        }

        // Move to the next cell
        float scale = uintBitsToFloat((scaleExp - 23 + 127) << 23);
        vec3 cellMin = FloorScale(pos, scaleExp);
        vec3 cellSize = vec3(scale);

        vec3 sidePos = cellMin + step(vec3(0.0), dir) * cellSize;
        vec3 sideDist = (sidePos - origin) * invDir;

        float tmax = min(min(sideDist.x, sideDist.y), sideDist.z) + 0.0001;
        pos = origin + tmax * dir;
    }

    return false;
}

void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(texelCoord) + 0.5) / ScreenSize;
    uv = uv * 2.0 - 1.0;

    vec3 viewPointLocal = vec3(uv * ViewParams.xy, ViewParams.z);
    vec3 viewPoint = (CamWorldMatrix * vec4(viewPointLocal, 1.0)).xyz;

    vec3 rayOrigin = CamWorldMatrix[3].xyz;
    vec3 rayDir = normalize(viewPoint - rayOrigin);

    vec3 hitPos;
    bool hit = RayCast(rayOrigin, rayDir, hitPos);

    vec4 color = hit ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);
    imageStore(imgOutput, texelCoord, color);
}